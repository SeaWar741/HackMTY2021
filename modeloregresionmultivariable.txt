# -*- coding: utf-8 -*-
"""ModeloRegresionMultivariable

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ndmHc7ZKU32NQk5dqLZkJRCKCO8c5Oka

![image](https://avatars.githubusercontent.com/u/69404850?s=200&v=4)
# **49 - DFuture: Modelo de predicción de la inflación en México**
Abraham Cepeda Oseguera

Axel Mercado Gasque

Juan Carlos Garfias Tovar
"""

import pandas as pd
import numpy as np
import sklearn
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from numpy import inf
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

"""# Importar archivo y limpieza de archivos con rellenado de valores nulos"""

df = pd.read_excel("IndicadoresFinalesV2.xlsx") #reemplazar por archivo con variables e inflacion deseada
print(df)

print(df.mean())

#usando media para reemplazar valores nulos
df2 = df.fillna(df.mean())
print(df2.head())

df1 = df2.dropna(axis=1, how='all')
print(df1.mean())

df1.to_csv("IndicadoresLimpio.csv") #CSV con limpieza de datos aplicada

print(df1["INPC"].mean()) #promedio de INPC

"""# Generar matrices de correlacion"""

corr_df = df1.corr(method='pearson')

plt.matshow(corr_df)
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(corr_df, annot=True)
plt.show()

corr_df.style.background_gradient(cmap='coolwarm')

for col in df1.columns: #desplegar columnas
    print(col)

"""# Modelo de regresion multivariable"""

y = df1.INPC
x = df1.loc[:, df1.columns != 'INPC']
x = x.loc[:, x.columns != 'Date']
print(x)

model = LinearRegression()

x = x.fillna(x.mean())

print(len(x.index)) #ver el size
print(len(y.index))

model.fit(x,y) #ajustar datos al modelo

prediction = model.predict(x) #predecir datos del modelo
print(prediction)

plt.figure(figsize=(16,9)) #Grafica comparativa
plt.plot( list(df1['INPC']))
plt.plot( list(prediction))
plt.title("Actual vs Predicted")
plt.ylabel("INCP")
plt.legend(('Actual','predicted'))
plt.show()

predictionsDataframe = pd.DataFrame(prediction) #Exportar valores
print(predictionsDataframe)
predictionsDataframe.to_csv("PrediccionesRegresionLineal.csv")

"""# Evaluar modelo"""

# Commented out IPython magic to ensure Python compatibility.
# The coefficients
print('Coefficients: \n', model.coef_)
# The mean squared error
print('Mean squared error: %.2f'% mean_squared_error(y, prediction))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f' % r2_score(y, prediction))

print(model.score(x,y))

print(model.intercept_)